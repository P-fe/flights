---
title: "."
title-slide-attributes:
    data-background-image: "logo.PNG"
    data-background-size: cover
format:
  revealjs:
    theme: simple  # 기본 테마(원하는 테마 변경 가능)
    css: styles.css
    slide-number: true  # 페이지 번호 표시
    footer: "Team 6 | LS BigData School | 2025"  # 푸터 설정
    logo: "logo3.png"  # 로고 삽입
    code-fold: true
---

## 분석 주제

- 본 분석에서는 **flights**와 **planes** 데이터를 병합하여 특정 변수 간의 관계를 분석합니다.

---

### **1. 사용 데이터**

| 데이터셋       | 설명                                       |
|---------------|-------------------------------------------|
| `flights.csv`  | 항공편 정보 (출발지, 도착지, 지연 시간 등) |
| `planes.csv`   | 항공기 정보 (제조 연도, 모델 등)           |
| `airlines.csv` | 항공사 코드 및 항공사명 정보               |

---

```{python}
#| echo: false
from nycflights13 import flights, planes, airlines
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

plane_df = planes.rename(columns={'year': 'manuf_year'})
df = pd.merge(flights, plane_df, on='tailnum')
```

### **2. 데이터 전처리**

#####  날짜 처리 (`datetime` 변환)
```{python}
df['datetime'] = pd.to_datetime(df[['year', 'month', 'day', 'hour', 'minute']])
```


```{python}
#| echo: false
#| eval: true
df['datetime'].info()

```


---

##### 문자열 처리 (항공사 코드 -\> 이름 매핑)
```{python}
#| echo: true
#| eval: true
df = df.merge(airlines, on="carrier", how="left")   
print(df.info())

```

---

# **3. 분석**
 **총 3개의 분석을 진행합니다.**

- **3.1 항공사별 출발 및 도착 지연 시간 분석**
- **3.2 제작 연도별 기체 성능 분석**
- **3.3 특정 노선의 지연 시간 분석**

---

### **3.1 항공사별 출발 및 도착 지연 시간 분석** ✈️

#####  **분석 목적**
- 항공사별 출발(`dep_delay`) 및 도착 지연(`arr_delay`) 시간의 관계 분석  
- 출발이 늦으면 도착도 늦을까?  

#####  **데이터 시각화**
```{python}
delay_stats_by_carrier = flights.groupby('carrier')[['dep_delay', 'arr_delay']].mean().reset_index()
delay_stats_by_carrier = delay_stats_by_carrier.merge(airlines, on='carrier', how='left')

plt.figure(figsize=(10,6))
sns.scatterplot(data=delay_stats_by_carrier, x='dep_delay', y='arr_delay', hue='name', s=100)
plt.axline((0, 0), slope=1, linestyle="--", color="gray")  
plt.xlabel("Average Departure Delay (minutes)")
plt.ylabel("Average Arrival Delay (minutes)")
plt.title("Departure vs Arrival Delay by Airline")
plt.legend(title="Airline", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.grid(True)
plt.show()
```

---

## **3.2 제조사별 엔진 Delay 시간 분석** 🛩️


#####  **분석 목적**

- 항공기 엔진 제조사중 가장 출발 지연에 가장 많은 영향을 끼치는 것은?
- 가장 유명한 Boeing이 지연이 많을 것이다.
---

#####  **데이터 전처리**
```{python}
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from nycflights13 import flights, planes

```

```{python}
#| echo: true
df = pd.merge(flights,planes, on ='tailnum', how='inner')

df['delay_time'] = df['arr_delay'] + df['dep_delay']

df_air_time = (
    df.groupby(['manufacturer', 'model'])["delay_time"]
    .agg(['mean', 'count']).sort_values('mean', ascending=False)  
).reset_index()
print(df_air_time)
```

- 도착 지연시간과 출발 지연시간을 더하여 하나의 데이터 생성
- 제조사별 모델을 그룹화하여 평균과 비행 횟수를 구함
- 이때 비행 횟수가 적은 데이터는 다른 영향이 있을거라 생각함

---

#####  **데이터 전처리**

```{python}
#| echo: true
df_air_time = df_air_time.drop(df_air_time[df_air_time['count']<1000].index)
df_air_time.shape   # 기존 147개 데이터에서 38개의 데이터로 축소

delay_time_top = df_air_time.nlargest(10, 'mean')
delay_time_bottom = df_air_time.nsmallest(10, 'mean')
# 상위 10개, 하위 10개 추출
print(delay_time_top)
print(delay_time_bottom)


# 
```
- 운항 횟수가 적은 운행은 다른 영향으로 지연이 되었을 거라 판단.
- 1000회 이상 운항된 모델들로만 필터링 실시
- 기존 147개의 데이터에서 38개의 데이터로 축소됨
 
---

#####  **데이터 전처리**

```{python}
#| echo: true
delay_time_top['manu_model'] = delay_time_top['manufacturer'].apply(lambda x: x[:3] + (x.split()[1][0] if len(x.split()) > 1 else '')) + "/" + delay_time_top['model']
delay_time_bottom['manu_model'] = delay_time_bottom['manufacturer'].apply(lambda x: x[:3] + (x.split()[1][0] if len(x.split()) > 1 else '')) + "/" + delay_time_bottom['model']
print(delay_time_top)
print(delay_time_bottom)
```
- 그래프 생성시 제조사, 모델명을 한눈에 알기 위해
- 제조사 앞글자 3개와 모델명 합친 열 manu_model을 생성

---

```{python}
plt.figure(figsize=(14,7))
sns.barplot(x=delay_time_top['manu_model'],y=delay_time_top['mean'], palette="Reds_r")
plt.ylim(0, 50)
plt.xlabel("model by manufacturer",fontsize=20)
plt.ylabel("delay time_mean",fontsize=20)
plt.title("Bad flights",fontsize=20)
plt.xticks(rotation=40,fontsize=16, fontweight='bold');
```

---

```{python}
plt.figure(figsize=(14,7))
sns.barplot(x=delay_time_bottom['manu_model'],y=delay_time_bottom['mean'], palette="Blues_r")
plt.ylim(-5, 10)
plt.xlabel("model by manufacturer",fontsize=20)
plt.ylabel("delay time_mean",fontsize=20)
plt.title("Good flights",fontsize=20)
plt.xticks(rotation=40,fontsize=16, fontweight='bold');
```

---

#### 결론

- 가장 신뢰성이 떨어지는 기종 Top3는 '**EMB**'사의 '**EMB-145LR**'기종, '**BOE**'사의 '**717-200**'기종 , '**CAN**'사의 '**CL-600-2B19**'기종이다
- 또한 제조사만 봤을때 '**BOMI**'사 **4대**, '**EMB**'사 **2대** , '**BOE**'사 **2대**가 나타나여 이 제조사들의 model이 지연이 잘되는 걸 알 수 있다.
<br>
- 반대로 신뢰성이 높은 기종 Top3는 '**BOE**'사의 '**757-231**'기종, '**BOE**'사의 '**757-2Q8**' 기종, '**AIR**'사의 '**A321-211**'기종 이다.
- 또한 제조사만 봤을때 
-

---

### **3.3 특정 노선의 지연 시간 분석** 🌍

#####  **분석 목적**
- 특정 노선(예: JFK → LAX)의 출발 및 도착 지연 시간이 특별한 패턴을 보일까?  
- 특정 시간대에 지연이 집중되는가?

#####  **데이터 시각화**
```{python}
jfk_lax_flights = df[df['dest'] == 'LAX']

plt.figure(figsize=(10,6))
sns.boxplot(data=jfk_lax_flights, x='hour', y='dep_delay')
plt.xlabel("Departure Hour")
plt.ylabel("Departure Delay (minutes)")
plt.title("JFK → LAX: Departure Delay by Time of Day")
plt.grid(True)
plt.show()
```

---

###  **결론**
1️⃣ 항공사별로 **출발 지연과 도착 지연의 상관관계가 다름**  
2️⃣ 오래된 기체일수록 **출발 및 도착 지연 시간이 증가하는 경향**  
3️⃣ 특정 노선에서는 **출발 시간대에 따라 지연 패턴이 다름**  

---